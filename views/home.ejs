<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timer</title>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    #randomMoveSequence {
        font-size: 40px;
        margin-top:10px;
    }
    #timer {
        padding-top: 50vh;
        font-size: 36px;
    }
    #solveTimes {
        position: fixed;
        bottom: 10px;
        left: 10px;
    }
    #solveTimes table {
        border-collapse: collapse;
    }
    #solveTimes table, #solveTimes th, #solveTimes td {
        border: 1px solid black;
        padding: 5px;
    }
</style>
</head>
<body>
<div id="randomMoveSequence">Scramble: <%= randomNumberString %></div>
<div id="timer">00:00</div>
<div id="solveTimes">
<h2>Solve Times:</h2>
<p>Average: <%= averageTime %></p>
<table>
    <thead>
        <tr>
            <th>Solve Number</th>
            <th>Time</th>
        </tr>
    </thead>
    <tbody id="solveTimesBody">
        
        <% for (let i = 0; i < solveTimes.length; i++) { %>
            <tr>
                <td><%= i + 1 %></td>
                <td><%= solveTimes[i] %></td>
            </tr>
        <% } %>

    </tbody>
    
</table>

</div>
<script>
    let timerInterval;
    let startTime;
    let isRunning = false;
    const timerDisplay = document.getElementById('timer');
    const randomMoveSequenceDisplay = document.getElementById('randomMoveSequence');

    function startTimer() {
        startTime = Date.now();
        timerInterval = setInterval(updateTimer, 10); // Update every 10 milliseconds
        isRunning = true;
    }

    function stopTimer() {
        clearInterval(timerInterval);
        isRunning = false;
        const time = timerDisplay.textContent;
        recordTime(time);
        fetchNewScramble();
    }

    function updateTimer() {
        const elapsedTime = Date.now() - startTime;
        const seconds = Math.floor(elapsedTime / 1000);
        const milliseconds = Math.floor(elapsedTime % 1000);

        const displaySeconds = seconds;
        const displayMilliseconds = padTime(milliseconds, 3);

        timerDisplay.textContent = `${displaySeconds}.${displayMilliseconds}`;
    }

    function padTime(time, length = 2) {
        let result = time.toString();
        while (result.length < length) {
            result = '0' + result;
        }
        return result;
    }

    function recordTime(time) {
        fetch('/recordTime', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `time=${time}`
        })
        .then(response => response.json()) // Assume the server returns the updated solveTimes array as JSON
        .then(data => {
            solveTimes = data.solveTimes; // Update the solveTimes array on the client-side
            updateSolveTimesTable(); // Regenerate the table
        })
        .catch(error => console.error('Error recording time:', error));
    }

    function updateSolveTimesTable() {
        const solveTimesBody = document.getElementById('solveTimesBody');
        solveTimesBody.innerHTML = ''; // Clear the existing table rows
        for (let i = 0; i < solveTimes.length; i++) {
            const row = document.createElement('tr');
            const solveNumberCell = document.createElement('td');
            solveNumberCell.textContent = i + 1;
            const timeCell = document.createElement('td');
            timeCell.textContent = solveTimes[i];
            row.appendChild(solveNumberCell);
            row.appendChild(timeCell);
            solveTimesBody.appendChild(row);
        }
    }


    document.addEventListener('keydown', function(event) {
        if (event.code === 'Space' && !isRunning) {
            startTimer();
        } else if (event.code !== 'e' && isRunning) {
            stopTimer();
        }
    });

    function fetchNewScramble() {
        fetch('/newScramble')
            .then(response => response.text())
            .then(scramble => {
                randomMoveSequenceDisplay.textContent = "Scramble: " + scramble;
            })
            .catch(error => console.error('Error fetching new scramble:', error));
    }

    let solveTimes = []; // Add this line to initialize the solveTimes array

    function recordTime(time) {
        fetch('/recordTime', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `time=${time}`
        })
        .then(response => response.json())
        .then(data => {
            solveTimes = data.solveTimes;
            updateSolveTimesTable();
            updateAverageTime(); // Update the average time display
        })
        .catch(error => console.error('Error recording time:', error));
    }

    function updateAverageTime() {
        const averageDisplay = document.querySelector('#solveTimes p');
        const sum = solveTimes.reduce((acc, cur) => acc + parseFloat(cur), 0); // Calculate the sum of solve times
        const average = sum / solveTimes.length; // Calculate the average
        averageDisplay.textContent = `Average: ${average.toFixed(2)}`; // Update the average display
    }
</script>
</body>
</html>
